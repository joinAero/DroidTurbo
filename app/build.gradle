apply plugin: 'com.android.application'

def getGitBranch() {
    def gitBranch = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'symbolic-ref', '--short', '-q', 'HEAD'
        standardOutput = gitBranch
        // ignore error output as we might not be on a branch
        ignoreExitValue = true
    }
    return gitBranch.toString().trim();
}

def getGitHash() {
    def gitHash = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = gitHash
        // ignore error output as we might not be on a branch
        ignoreExitValue = true
    }
    return gitHash.toString().trim();
}

android {
    compileSdkVersion versionCompileSdk
    buildToolsVersion versionBuildTools
    //compileSdkVersion 26
    //buildToolsVersion '26.0.2'

    // Apache HTTP Client Removal - Android 6.0 Changes:
    // http://developer.android.com/about/versions/marshmallow/android-6.0-changes.html#behavior-apache-http-client
    //useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "cc.eevee.turbo"

        minSdkVersion versionMinSdk
        targetSdkVersion versionTargetSdk
        //minSdkVersion 21
        //targetSdkVersion 26

        versionCode 1
        versionName "1.0.0_" + gitHash

        // Apps Over 65K Methods: http://developer.android.com/tools/building/multidex.html
        //multiDexEnabled true

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        renderscriptTargetApi 18
        renderscriptSupportModeEnabled true

        externalNativeBuild {
            cmake {
                arguments '-DANDROID_PLATFORM=android-9',
                        '-DANDROID_TOOLCHAIN=clang',
                        '-DANDROID_STL=gnustl_static'
                cppFlags "-std=c++11 -frtti -fexceptions"
            }
        }
        ndk {
            abiFilters ndkABIs
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs += ["${project.rootDir}/OpenCV-android-sdk/sdk/native/libs"]
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'LICENSE'
        exclude 'LICENSE.txt'
    }

    // Configure APK Splits: https://developer.android.com/studio/build/configure-apk-splits.html
    /*splits {
        // Configures screen ABI split settings.
        abi {
            // Enables ABI APK splits.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "armeabi", "armeabi-v7a", "arm64-v8a", "x86", "x86_64"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk true
        }
    }*/

    //project.ext.versionCodes = ['armeabi': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3, 'mips': 5, 'mips64': 6, 'x86': 8, 'x86_64': 9]

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def apkName = 'DroidTurbo'
            if (variant.productFlavors.size() > 0) {
                apkName += '-' + variant.productFlavors[0].name
            }
            def branch = gitBranch
            if (branch != 'master') {
                apkName += '-' + branch
            }
            def version = variant.versionName
            def build = variant.buildType.name
            if (build == 'release') {
                def date = new Date().format('MMddHHmm')
                //def date = new Date().format('yyyyMMdd_HHmmssSSS')
                build += '_' + date
            }
            apkName += '-v' + version + '-' + build + '.apk'

            // Gradle Sync Failed: https://github.com/gradle/gradle/issues/2340
            //output.outputFile = new File(output.outputFile.parent, apkName)
            //outputFileName = new File(output.outputFile.parent, apkName)
            outputFileName = apkName

            // assign different version code for each output
            /*
            def abi = project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0)
            output.versionCodeOverride = abi * 1000000 + android.defaultConfig.versionCode
            */
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation impls.supportAppCompat
    //implementation "com.android.support:appcompat-v7:27.1.1"
    implementation impls.supportCardView
    implementation impls.supportDesgin

    implementation impls.supportConstraint
    //implementation "com.android.support.constraint:constraint-layout:1.1.2"

    implementation impls.supportMultidex
    //implementation "com.android.support:multidex:1.0.3"

    // simplify

    implementation impls.butterknife
    annotationProcessor aps.butterknifeCompiler

    // FindBugs JSR305: https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
    //implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation impls.guava

    // behavior

    implementation impls.rxandroid
    implementation impls.rxjava

    // view & widget

    implementation impls.gifdrawable

    // dependent libraries

    implementation project(':libgldraw')
    implementation project(':libopencv')
    implementation project(':openCVLibrary320')

    // test

    testImplementation testImpls.junit
    //testImplementation "junit:junit:4.12"
    testImplementation testImpls.assertj
    testImplementation testImpls.mockito

    // android test
    androidTestImplementation impls.supportAnnotations
    androidTestImplementation androidTestImpls.supportTestRunner
    androidTestImplementation androidTestImpls.supportTestRules
    androidTestImplementation(androidTestImpls.supportTestEspresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    })
    //androidTestImplementation androidTestImpls.supportTestUiautomator

    /*
    androidTestImplementation androidTestImpls.assertjAndroid
    androidTestImplementation androidTestImpls.assertjAndroidSupport
    androidTestImplementation androidTestImpls.assertjAndroidAppCompat
    androidTestImplementation androidTestImpls.assertjAndroidDesign
    androidTestImplementation androidTestImpls.assertjAndroidCardView
    androidTestImplementation androidTestImpls.assertjAndroidRecyclerView
    */
}

// Reference:
// * Android Plugin for Gradle: http://developer.android.com/tools/building/plugin-for-gradle.html
// * Gradle Plugin User Guide: http://tools.android.com/tech-docs/new-build-system/user-guide

// * Optimize Your Build Speed: https://developer.android.com/studio/build/optimize-your-build.html
// * Use Java 8 language features: https://developer.android.com/studio/write/java8-support.html
